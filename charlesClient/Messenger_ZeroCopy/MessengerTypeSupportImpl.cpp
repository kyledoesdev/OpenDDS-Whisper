/* Generated by ..\..\..\bin\opendds_idl version 3.18.1 (ACE version 6.2a_p21) running on input file Messenger.idl */
#include "MessengerTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/XTypes/TypeObject.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

static const XTypes::TypeMap& get_minimal_type_map();
} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL



/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: OpenDDS */


/* End MODULE: OpenDDS */


/* Begin MODULE: Messenger */



/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<Messenger_Message_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL,XTypes::EquivalenceHashWrapper(72, 255, 217, 227, 5, 125, 103, 194, 32, 118, 169, 162, 24, 53));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<Messenger_Message_xtag>()
{
  return get_minimal_type_map();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::Messenger::Message& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"Name",0},{"rating",1},{"reviews",2},{"distance",3},{"subject",4},{"subject_id",5},{"address",6},{"city",7},{"state",8},{"zip",9},{"count",10},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct()) return false;
  XTypes::MemberId member_id;
  while (value_reader.begin_struct_member(member_id, helper)) {
    switch (member_id) {
    case 0: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.Name = x.c_str();
      }
      break;
    }
    case 1: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.rating = x.c_str();
      }
      break;
    }
    case 2: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.reviews = x.c_str();
      }
      break;
    }
    case 3: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.distance = x.c_str();
      }
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.subject = x.c_str();
      }
      break;
    }
    case 5: {
      if (!value_reader.read_int32(value.subject_id)) return false;
      break;
    }
    case 6: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.address = x.c_str();
      }
      break;
    }
    case 7: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.city = x.c_str();
      }
      break;
    }
    case 8: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.state = x.c_str();
      }
      break;
    }
    case 9: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.zip = x.c_str();
      }
      break;
    }
    case 10: {
      if (!value_reader.read_int32(value.count)) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::Messenger::Message& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_struct_member("Name");
  value_writer.write_string(value.Name);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("rating");
  value_writer.write_string(value.rating);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("reviews");
  value_writer.write_string(value.reviews);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("distance");
  value_writer.write_string(value.distance);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("subject");
  value_writer.write_string(value.subject);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("subject_id");
  value_writer.write_int32(value.subject_id);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("address");
  value_writer.write_string(value.address);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("city");
  value_writer.write_string(value.city);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("state");
  value_writer.write_string(value.state);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("zip");
  value_writer.write_string(value.zip);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("count");
  value_writer.write_int32(value.count);
  value_writer.end_struct_member();
  value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::Messenger::Message& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.Name = "";
  stru.rating = "";
  stru.reviews = "";
  stru.distance = "";
  stru.subject = "";
  stru.subject_id = 0;
  stru.address = "";
  stru.city = "";
  stru.state = "";
  stru.zip = "";
  stru.count = 0;
}

void serialized_size(const Encoding& encoding, size_t& size, const  ::Messenger::Message& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.Name.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.rating.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.reviews.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.distance.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.subject.in()) + 1;
  primitive_serialized_size(encoding, size, stru.subject_id);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.address.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.city.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.state.in()) + 1;
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.zip.in()) + 1;
  primitive_serialized_size(encoding, size, stru.count);
}

bool operator<<(Serializer& strm, const  ::Messenger::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.Name.in())
    && (strm << stru.rating.in())
    && (strm << stru.reviews.in())
    && (strm << stru.distance.in())
    && (strm << stru.subject.in())
    && (strm << stru.subject_id)
    && (strm << stru.address.in())
    && (strm << stru.city.in())
    && (strm << stru.state.in())
    && (strm << stru.zip.in())
    && (strm << stru.count);
}

bool operator>>(Serializer& strm,  ::Messenger::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.Name.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.rating.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.reviews.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.distance.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.subject.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.subject_id)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.address.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.city.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.state.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.zip.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.count)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const  ::Messenger::Message>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.subject_id);
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const  ::Messenger::Message>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.subject_id);
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::Messenger::Message>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.subject_id)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::Messenger::Message>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
  primitive_serialized_size(encoding, size, stru.value.subject_id);
}

bool operator<<(Serializer& strm, const KeyOnly<const  ::Messenger::Message>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
  return (strm << stru.value.subject_id);
}

bool operator>>(Serializer& strm, const KeyOnly< ::Messenger::Message>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.subject_id)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Messenger {
::DDS::DataWriter_ptr MessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Message> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr MessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr MessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Message, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& MessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Message>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool MessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key();
}

const char* MessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

void MessageTypeSupportImpl::representations_allowed_by_type(
  ::DDS::DataRepresentationIdSeq& seq)
{
  MarshalTraitsType::representations_allowed_by_type(seq);
}

const OpenDDS::XTypes::TypeIdentifier& MessageTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::Messenger_Message_xtag>();
}

const OpenDDS::XTypes::TypeMap& MessageTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::Messenger_Message_xtag>();
}

OpenDDS::DCPS::Extensibility MessageTypeSupportImpl::getExtensibility() const
{
  return MarshalTraitsType::extensibility();
}

MessageTypeSupport::_ptr_type MessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::Messenger::Message> : MetaStruct {
  typedef  ::Messenger::Message T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    if (!ACE_OS::strcmp(field, "subject_id")) {
      return true;
    }
    return false;
  }

  ACE_CDR::ULong map_name_to_id(const char* field) const
  {
    static const std::pair<std::string, ACE_CDR::ULong> name_to_id_pairs[] = {
      std::make_pair("Name", 0),
      std::make_pair("rating", 1),
      std::make_pair("reviews", 2),
      std::make_pair("distance", 3),
      std::make_pair("subject", 4),
      std::make_pair("subject_id", 5),
      std::make_pair("address", 6),
      std::make_pair("city", 7),
      std::make_pair("state", 8),
      std::make_pair("zip", 9),
      std::make_pair("count", 10),
    };
    static const std::map<std::string, ACE_CDR::ULong> name_to_id_map(name_to_id_pairs, name_to_id_pairs + 11);
    std::map<std::string, ACE_CDR::ULong>::const_iterator it = name_to_id_map.find(field);
    if (it == name_to_id_map.end()) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::Messenger::Message)");
    } else {
      return it->second;
    }
  }

  Value getValue(const void* stru, const char* field) const
  {
    const  ::Messenger::Message& typed = *static_cast<const  ::Messenger::Message*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "Name") == 0) {
      return typed.Name.in();
    }
    if (std::strcmp(field, "rating") == 0) {
      return typed.rating.in();
    }
    if (std::strcmp(field, "reviews") == 0) {
      return typed.reviews.in();
    }
    if (std::strcmp(field, "distance") == 0) {
      return typed.distance.in();
    }
    if (std::strcmp(field, "subject") == 0) {
      return typed.subject.in();
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return typed.subject_id;
    }
    if (std::strcmp(field, "address") == 0) {
      return typed.address.in();
    }
    if (std::strcmp(field, "city") == 0) {
      return typed.city.in();
    }
    if (std::strcmp(field, "state") == 0) {
      return typed.state.in();
    }
    if (std::strcmp(field, "zip") == 0) {
      return typed.zip.in();
    }
    if (std::strcmp(field, "count") == 0) {
      return typed.count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::Messenger::Message)");
  }

  Value getValue(Serializer& strm, const char* field) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      throw std::runtime_error("Unable to reader delimiter in getValue");
    }
  }
    std::string base_field = field;
    size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "Name") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'Name' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'Name' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'Name' contents could not be skipped");
      }
    }
    if (base_field == "rating") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'rating' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'rating' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'rating' contents could not be skipped");
      }
    }
    if (base_field == "reviews") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'reviews' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'reviews' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'reviews' contents could not be skipped");
      }
    }
    if (base_field == "distance") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'distance' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'distance' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'distance' contents could not be skipped");
      }
    }
    if (base_field == "subject") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'subject' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'subject' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'subject' contents could not be skipped");
      }
    }
    if (base_field == "subject_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'subject_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'subject_id' could not be skipped");
      }
    }
    if (base_field == "address") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'address' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'address' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'address' contents could not be skipped");
      }
    }
    if (base_field == "city") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'city' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'city' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'city' contents could not be skipped");
      }
    }
    if (base_field == "state") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'state' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'state' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'state' contents could not be skipped");
      }
    }
    if (base_field == "zip") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'zip' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'zip' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'zip' contents could not be skipped");
      }
    }
    if (base_field == "count") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'count' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'count' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "Name") == 0) {
      return make_field_cmp(&T::Name, next);
    }
    if (std::strcmp(field, "rating") == 0) {
      return make_field_cmp(&T::rating, next);
    }
    if (std::strcmp(field, "reviews") == 0) {
      return make_field_cmp(&T::reviews, next);
    }
    if (std::strcmp(field, "distance") == 0) {
      return make_field_cmp(&T::distance, next);
    }
    if (std::strcmp(field, "subject") == 0) {
      return make_field_cmp(&T::subject, next);
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return make_field_cmp(&T::subject_id, next);
    }
    if (std::strcmp(field, "address") == 0) {
      return make_field_cmp(&T::address, next);
    }
    if (std::strcmp(field, "city") == 0) {
      return make_field_cmp(&T::city, next);
    }
    if (std::strcmp(field, "state") == 0) {
      return make_field_cmp(&T::state, next);
    }
    if (std::strcmp(field, "zip") == 0) {
      return make_field_cmp(&T::zip, next);
    }
    if (std::strcmp(field, "count") == 0) {
      return make_field_cmp(&T::count, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::Messenger::Message)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"Name", "rating", "reviews", "distance", "subject", "subject_id", "address", "city", "state", "zip", "count", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "Name") == 0) {
      return &static_cast<const T*>(stru)->Name;
    }
    if (std::strcmp(field, "rating") == 0) {
      return &static_cast<const T*>(stru)->rating;
    }
    if (std::strcmp(field, "reviews") == 0) {
      return &static_cast<const T*>(stru)->reviews;
    }
    if (std::strcmp(field, "distance") == 0) {
      return &static_cast<const T*>(stru)->distance;
    }
    if (std::strcmp(field, "subject") == 0) {
      return &static_cast<const T*>(stru)->subject;
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return &static_cast<const T*>(stru)->subject_id;
    }
    if (std::strcmp(field, "address") == 0) {
      return &static_cast<const T*>(stru)->address;
    }
    if (std::strcmp(field, "city") == 0) {
      return &static_cast<const T*>(stru)->city;
    }
    if (std::strcmp(field, "state") == 0) {
      return &static_cast<const T*>(stru)->state;
    }
    if (std::strcmp(field, "zip") == 0) {
      return &static_cast<const T*>(stru)->zip;
    }
    if (std::strcmp(field, "count") == 0) {
      return &static_cast<const T*>(stru)->count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::Messenger::Message)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "Name") == 0) {
      static_cast<T*>(lhs)->Name = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "rating") == 0) {
      static_cast<T*>(lhs)->rating = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "reviews") == 0) {
      static_cast<T*>(lhs)->reviews = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "distance") == 0) {
      static_cast<T*>(lhs)->distance = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "subject") == 0) {
      static_cast<T*>(lhs)->subject = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "subject_id") == 0) {
      static_cast<T*>(lhs)->subject_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "address") == 0) {
      static_cast<T*>(lhs)->address = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "city") == 0) {
      static_cast<T*>(lhs)->city = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "state") == 0) {
      static_cast<T*>(lhs)->state = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "zip") == 0) {
      static_cast<T*>(lhs)->zip = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "count") == 0) {
      static_cast<T*>(lhs)->count = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::Messenger::Message)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "Name") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->Name.in(), static_cast<const T*>(rhs)->Name.in());
    }
    if (std::strcmp(field, "rating") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->rating.in(), static_cast<const T*>(rhs)->rating.in());
    }
    if (std::strcmp(field, "reviews") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->reviews.in(), static_cast<const T*>(rhs)->reviews.in());
    }
    if (std::strcmp(field, "distance") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->distance.in(), static_cast<const T*>(rhs)->distance.in());
    }
    if (std::strcmp(field, "subject") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->subject.in(), static_cast<const T*>(rhs)->subject.in());
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return static_cast<const T*>(lhs)->subject_id == static_cast<const T*>(rhs)->subject_id;
    }
    if (std::strcmp(field, "address") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->address.in(), static_cast<const T*>(rhs)->address.in());
    }
    if (std::strcmp(field, "city") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->city.in(), static_cast<const T*>(rhs)->city.in());
    }
    if (std::strcmp(field, "state") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->state.in(), static_cast<const T*>(rhs)->state.in());
    }
    if (std::strcmp(field, "zip") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->zip.in(), static_cast<const T*>(rhs)->zip.in());
    }
    if (std::strcmp(field, "count") == 0) {
      return static_cast<const T*>(lhs)->count == static_cast<const T*>(rhs)->count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::Messenger::Message)");
  }
};

template<>
const MetaStruct& getMetaStruct< ::Messenger::Message>()
{
  static MetaStructImpl< ::Messenger::Message> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::Messenger::Message*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::Messenger::Message>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */

/* End MODULE: Messenger */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

namespace {
XTypes::TypeObject to0()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE,XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()),XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0,XTypes::TRY_CONSTRUCT1,XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL,XTypes::StringSTypeDefn(0))),XTypes::MinimalMemberDetail(73, 238, 48, 135))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1,XTypes::TRY_CONSTRUCT1,XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL,XTypes::StringSTypeDefn(0))),XTypes::MinimalMemberDetail(44, 85, 4, 171))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(2,XTypes::TRY_CONSTRUCT1,XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL,XTypes::StringSTypeDefn(0))),XTypes::MinimalMemberDetail(116, 220, 177, 206))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(3,XTypes::TRY_CONSTRUCT1,XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL,XTypes::StringSTypeDefn(0))),XTypes::MinimalMemberDetail(167, 78, 201, 197))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(4,XTypes::TRY_CONSTRUCT1,XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL,XTypes::StringSTypeDefn(0))),XTypes::MinimalMemberDetail(181, 227, 55, 78))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(5,XTypes::TRY_CONSTRUCT1 | XTypes::IS_KEY,XTypes::TypeIdentifier(XTypes::TK_INT32)),XTypes::MinimalMemberDetail(255, 171, 161, 209))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(6,XTypes::TRY_CONSTRUCT1,XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL,XTypes::StringSTypeDefn(0))),XTypes::MinimalMemberDetail(136, 77, 152, 4))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(7,XTypes::TRY_CONSTRUCT1,XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL,XTypes::StringSTypeDefn(0))),XTypes::MinimalMemberDetail(78, 213, 210, 234))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(8,XTypes::TRY_CONSTRUCT1,XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL,XTypes::StringSTypeDefn(0))),XTypes::MinimalMemberDetail(158, 211, 158, 46))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(9,XTypes::TRY_CONSTRUCT1,XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL,XTypes::StringSTypeDefn(0))),XTypes::MinimalMemberDetail(173, 205, 189, 121))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(10,XTypes::TRY_CONSTRUCT1,XTypes::TypeIdentifier(XTypes::TK_INT32)),XTypes::MinimalMemberDetail(226, 148, 42, 4))))));
}
XTypes::TypeMap get_minimal_type_map_private()
{
  XTypes::TypeMap tm;
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL,XTypes::EquivalenceHashWrapper(72, 255, 217, 227, 5, 125, 103, 194, 32, 118, 169, 162, 24, 53))] = to0();
  return tm;
}
}
const XTypes::TypeMap& get_minimal_type_map()
{
  static XTypes::TypeMap tm;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), tm);
  if (tm.empty()) {
    tm = get_minimal_type_map_private();
  }
  return tm;
}
} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

